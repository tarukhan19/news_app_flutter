import 'package:dio/dio.dart';
import 'package:get_it/get_it.dart';
import 'package:injectable/injectable.dart';
import 'package:news_app_flutter/injection.config.dart';

/*
✅@InjectableInit =>  This tells Injectable that this function is responsible for initializing all dependencies
registered in the project.

✅ configureDependencies => This function calls sl.init();, which is generated by Injectable and is responsible for
registering all dependencies.

✅ @module => This annotation is used when you need to register third-party classes that you don’t own (like Dio).

✅ @lazySingleton => Lazy singleton means Dio is only created when it is needed for the first time.

✅ @Inject(as:) to provide a solid implementation for an abstract class.

 */
final sl = GetIt.instance;

@InjectableInit()
Future<void> configureDependencies() async => sl.init();

@module
abstract class DioProvider {
  @lazySingleton
  Dio get dio => Dio();
}
